From c33354cd23829aa43e08dab4eb6a1352f5d5e3c4 Mon Sep 17 00:00:00 2001
From: John Crispin <john@phrozen.org>
Date: Tue, 3 Nov 2020 18:27:22 +0100
Subject: [PATCH 26/26] rtl838x: various dsa/network fixes

Signed-off-by: John Crispin <john@phrozen.org>
---
 .../rtl838x/base-files/etc/board.d/02_network |   3 +-
 .../base-files/etc/uci-defaults/99-mgmt-iface |  15 +++
 .../files-5.4/drivers/net/dsa/rtl838x_sw.c    | 116 +++++++++---------
 3 files changed, 75 insertions(+), 59 deletions(-)
 create mode 100755 target/linux/rtl838x/base-files/etc/uci-defaults/99-mgmt-iface

diff --git a/target/linux/rtl838x/base-files/etc/board.d/02_network b/target/linux/rtl838x/base-files/etc/board.d/02_network
index d745526d0e..98f5add7bc 100755
--- a/target/linux/rtl838x/base-files/etc/board.d/02_network
+++ b/target/linux/rtl838x/base-files/etc/board.d/02_network
@@ -11,7 +11,8 @@ rtl838x_setup_switch()
 	for lan in /sys/class/net/lan*; do
 		lan_list="$lan_list $(basename $lan)"
 	done
-	ucidef_set_interface_lan "$lan_list"
+	ucidef_set_interface_wan "$lan_list"
+	ucidef_set_bridge_device switch0
 }
 
 rtl838x_setup_macs()
diff --git a/target/linux/rtl838x/base-files/etc/uci-defaults/99-mgmt-iface b/target/linux/rtl838x/base-files/etc/uci-defaults/99-mgmt-iface
new file mode 100755
index 0000000000..b893ca46db
--- /dev/null
+++ b/target/linux/rtl838x/base-files/etc/uci-defaults/99-mgmt-iface
@@ -0,0 +1,15 @@
+#!/bin/sh
+uci -q batch <<-EOF
+add network bridge-vlan
+set network.@bridge-vlan[-1].device='switch0'
+set network.@bridge-vlan[-1].vlan='100'
+set network.@bridge-vlan[-1].ports='lan1:t'
+
+set network.mgmt=interface
+set network.mgmt.proto=static
+set network.mgmt.ifname='switch0.100'
+set network.mgmt.ipaddr='192.168.250.1'
+set network.mgmt.netmask='255.255.255.0'
+
+set uhttpd.main.listen_http=192.168.250.1:80
+EOF
diff --git a/target/linux/rtl838x/files-5.4/drivers/net/dsa/rtl838x_sw.c b/target/linux/rtl838x/files-5.4/drivers/net/dsa/rtl838x_sw.c
index 7f6c2d6a29..b902315d0b 100644
--- a/target/linux/rtl838x/files-5.4/drivers/net/dsa/rtl838x_sw.c
+++ b/target/linux/rtl838x/files-5.4/drivers/net/dsa/rtl838x_sw.c
@@ -353,7 +353,7 @@ static irqreturn_t rtl838x_switch_irq(int irq, void *dev_id)
 
 	/* Clear status */
 	sw_w32(ports, RTL838X_ISR_PORT_LINK_STS_CHG);
-	pr_info("Link change: status: %x, ports %x\n", status, ports);
+	pr_debug("Link change: status: %x, ports %x\n", status, ports);
 
 	for (i = 0; i < 28; i++) {
 		if (ports & (1 << i)) {
@@ -377,7 +377,7 @@ static irqreturn_t rtl839x_switch_irq(int irq, void *dev_id)
 
 	/* Clear status */
 	sw_w64(ports, RTL839X_ISR_PORT_LINK_STS_CHG);
-	pr_info("Link change: status: %x, ports %llx\n", status, ports);
+	pr_debug("Link change: status: %x, ports %llx\n", status, ports);
 
 	for (i = 0; i < 52; i++) {
 		if (ports & (1 << i)) {
@@ -681,7 +681,7 @@ static void rtl8390_get_version(struct rtl838x_switch_priv *priv)
 
 	sw_w32_mask(0xf << 28, 0xa << 28, RTL839X_CHIP_INFO);
 	info = sw_r32(RTL839X_CHIP_INFO);
-	pr_info("Chip-Info: %x\n", info);
+	pr_debug("Chip-Info: %x\n", info);
 	priv->version = RTL8390_VERSION_A;
 }
 
@@ -747,7 +747,7 @@ static void rtl838x_enable_phy_polling(struct rtl838x_switch_priv *priv)
 			v |= 1 << i;
 	}
 
-	pr_info("%s: %16llx\n", __func__, v);
+	pr_debug("%s: %16llx\n", __func__, v);
 	priv->r->set_port_reg(v, priv->r->smi_poll_ctrl);
 
 	/* PHY update complete */
@@ -763,9 +763,9 @@ void rtl839x_print_matrix(void)
 	int i;
 
 	for (i = 0; i < 52; i += 4)
-		pr_info("> %16llx %16llx %16llx %16llx\n",
+		pr_debug("> %16llx %16llx %16llx %16llx\n",
 			ptr[i + 0], ptr[i + 1], ptr[i + 2], ptr[i + 3]);
-	pr_info("CPU_PORT> %16llx\n", ptr[52]);
+	pr_debug("CPU_PORT> %16llx\n", ptr[52]);
 }
 
 void rtl838x_print_matrix(void)
@@ -777,10 +777,10 @@ void rtl838x_print_matrix(void)
 		return rtl839x_print_matrix();
 
 	for (i = 0; i < 28; i += 8)
-		pr_info("> %8x %8x %8x %8x %8x %8x %8x %8x\n",
+		pr_debug("> %8x %8x %8x %8x %8x %8x %8x %8x\n",
 			ptr[i + 0], ptr[i + 1], ptr[i + 2], ptr[i + 3], ptr[i + 4], ptr[i + 5],
 			ptr[i + 6], ptr[i + 7]);
-	pr_info("CPU_PORT> %8x\n", ptr[28]);
+	pr_debug("CPU_PORT> %8x\n", ptr[28]);
 }
 
 static void rtl838x_init_stats(struct rtl838x_switch_priv *priv)
@@ -805,7 +805,7 @@ static int rtl838x_setup(struct dsa_switch *ds)
 	u64 port_bitmap = 0;
 	struct rtl838x_switch_priv *priv = ds->priv;
 
-	pr_info("%s called\n", __func__);
+	pr_debug("%s called\n", __func__);
 
 	/* Disable MAC polling the PHY so that we can start configuration */
 	priv->r->set_port_reg(0, priv->r->smi_poll_ctrl);
@@ -830,7 +830,7 @@ static int rtl838x_setup(struct dsa_switch *ds)
 
 	/* Enable MAC Polling PHY again */
 	rtl838x_enable_phy_polling(priv);
-	pr_info("Please wait until PHY is settled\n");
+	pr_debug("Please wait until PHY is settled\n");
 	msleep(1000);
 	return 0;
 }
@@ -891,8 +891,8 @@ static int rtl838x_get_l2aging(struct rtl838x_switch_priv *priv)
 	pr_debug("RTL838X_L2_CTRL_1 %x\n", sw_r32(priv->r->l2_ctrl_1));
 
 	t = t * 128 / 625; /* Aging time in seconds. 0: L2 aging disabled */
-	pr_info("L2 AGING time: %d sec\n", t);
-	pr_info("Dynamic aging for ports: %x\n",
+	pr_debug("L2 AGING time: %d sec\n", t);
+	pr_debug("Dynamic aging for ports: %x\n",
 		sw_r32(priv->r->l2_port_aging_out));
 	return t;
 }
@@ -920,7 +920,7 @@ static void rtl838x_fast_age(struct dsa_switch *ds, int port)
 	struct rtl838x_switch_priv *priv = ds->priv;
 	int s = priv->family_id == RTL8390_FAMILY_ID ? 2 : 0;
 
-	pr_info("FAST AGE port %d\n", port);
+	pr_debug("FAST AGE port %d\n", port);
 	mutex_lock(&priv->reg_mutex);
 	/* RTL838X_L2_TBL_FLUSH_CTRL register bits, 839x has 1 bit larger
 	 * port fields:
@@ -1063,7 +1063,7 @@ static void dump_fdb(struct rtl838x_switch_priv *priv)
 		if (!(r[0] >> 17)) /* Check for invalid entry */
 			continue;
 
-		pr_info("-> port %02d: %pM, vid: %d, rvid: %d\n",
+		pr_debug("-> port %02d: %pM, vid: %d, rvid: %d\n",
 			(r[0] >> 12) & priv->port_mask, &mac[0], vid, rvid);
 	}
 
@@ -1096,7 +1096,7 @@ static int rtl838x_port_fdb_dump(struct dsa_switch *ds, int port,
 			continue;
 
 		if (port == ((r[0] >> 12) & 0x1f)) {
-			pr_info("-> mac %pM, vid: %d, rvid: %d\n", &mac[0], vid, rvid);
+			pr_debug("-> mac %pM, vid: %d, rvid: %d\n", &mac[0], vid, rvid);
 			cb(mac, vid, (r[0] >> 19) & 1, data);
 		}
 	}
@@ -1114,7 +1114,7 @@ static int rtl838x_port_fdb_dump(struct dsa_switch *ds, int port,
 		if (!(r[0] >> 17))
 			continue;
 
-		pr_info("Found in CAM: R1 %x R2 %x R3 %x\n", r[0], r[1], r[2]);
+		pr_debug("Found in CAM: R1 %x R2 %x R3 %x\n", r[0], r[1], r[2]);
 		if (port == ((r[0] >> 12) & priv->port_mask))
 			cb(mac, vid, (r[0] >> 19) & 1, data);
 	}
@@ -1135,7 +1135,7 @@ static int rtl838x_port_fdb_del(struct dsa_switch *ds, int port,
 	int idx = -1;
 	int err = 0;
 
-	pr_info("In %s, mac %llx, vid: %d, key: %x\n", __func__, mac, vid, key);
+	pr_debug("In %s, mac %llx, vid: %d, key: %x\n", __func__, mac, vid, key);
 	mutex_lock(&priv->reg_mutex);
 	for (i = 0; i < 4; i++) {
 		entry = read_l2_entry_using_hash(key, i, r);
@@ -1243,7 +1243,7 @@ static void rtl838x_port_stp_state_set(struct dsa_switch *ds, int port,
 	struct rtl838x_switch_priv *priv = ds->priv;
 	int n = priv->family_id == RTL8380_FAMILY_ID ? 2 : 4;
 
-	pr_info("%s: port %d state %2x\n", __func__, port, state);
+	pr_debug("%s: port %d state %2x\n", __func__, port, state);
 	if (port >= priv->cpu_port)
 		return;
 
@@ -1314,7 +1314,7 @@ static int rtl838x_port_mirror_add(struct dsa_switch *ds, int port,
 	int group;
 	struct rtl838x_switch_priv *priv = ds->priv;
 
-	pr_info("In %s\n", __func__);
+	pr_debug("In %s\n", __func__);
 
 	for (group = 0; group < 4; group++) {
 		if (priv->mirror_group_ports[group] == mirror->to_local_port)
@@ -1359,7 +1359,7 @@ static void rtl838x_port_mirror_del(struct dsa_switch *ds, int port,
 	int group = 0;
 	struct rtl838x_switch_priv *priv = ds->priv;
 
-	pr_info("In %s\n", __func__);
+	pr_debug("In %s\n", __func__);
 	for (group = 0; group < 4; group++) {
 		if (priv->mirror_group_ports[group] == mirror->to_local_port)
 			break;
@@ -1394,9 +1394,9 @@ void rtl838x_vlan_profile_dump(int index)
 
 	profile = sw_r32(RTL838X_VLAN_PROFILE(index));
 
-	pr_info("VLAN %d: L2 learning: %d, L2 Unknown MultiCast Field %x",
+	pr_debug("VLAN %d: L2 learning: %d, L2 Unknown MultiCast Field %x",
 		index, profile & 1, (profile >> 1) & 0x1ff);
-	pr_info("  IPv4 Unkn MultiCast Field %x, IPv6 Unkn MultiCast Field: %x",
+	pr_debug("  IPv4 Unkn MultiCast Field %x, IPv6 Unkn MultiCast Field: %x",
 		(profile >> 10) & 0x1ff, (profile >> 19) & 0x1ff);
 }
 
@@ -1405,7 +1405,7 @@ static int rtl838x_vlan_filtering(struct dsa_switch *ds, int port,
 {
 	struct rtl838x_switch_priv *priv = ds->priv;
 
-	pr_info("%s: port %d\n", __func__, port);
+	pr_debug("%s: port %d\n", __func__, port);
 	mutex_lock(&priv->reg_mutex);
 
 	if (vlan_filtering) {
@@ -1450,13 +1450,13 @@ static int rtl838x_vlan_prepare(struct dsa_switch *ds, int port,
 	struct rtl838x_vlan_info info;
 	struct rtl838x_switch_priv *priv = ds->priv;
 
-	pr_info("%s: port %d\n", __func__, port);
+	pr_debug("%s: port %d\n", __func__, port);
 
 	mutex_lock(&priv->reg_mutex);
 
 	priv->r->vlan_tables_read(1, &info);
 
-	pr_info("Tagged ports %llx, untag %llx, prof %x, MC# %d, UC# %d, MSTI %x\n",
+	pr_debug("Tagged ports %llx, untag %llx, prof %x, MC# %d, UC# %d, MSTI %x\n",
 		info.tagged_ports, info.untagged_ports, info.vlan_conf & 7,
 	       (info.vlan_conf & 8) >> 3, (info.vlan_conf & 16) >> 4,
 	       (info.vlan_conf & 0x3e0) >> 5);
@@ -1473,7 +1473,7 @@ static void rtl838x_vlan_add(struct dsa_switch *ds, int port,
 	int v;
 	u64 portmask;
 
-	pr_info("%s port %d, vid_end %d, vid_end %d, flags %x\n", __func__,
+	pr_debug("%s port %d, vid_end %d, vid_end %d, flags %x\n", __func__,
 	       port, vlan->vid_begin, vlan->vid_end, vlan->flags);
 
 	if (vlan->vid_begin > 4095 || vlan->vid_end > 4095) {
@@ -1519,7 +1519,7 @@ static int rtl838x_vlan_del(struct dsa_switch *ds, int port,
 	int v;
 	u64 portmask;
 
-	pr_info("%s: port %d, vid_end %d, vid_end %d, flags %x\n", __func__,
+	pr_debug("%s: port %d, vid_end %d, vid_end %d, flags %x\n", __func__,
 		port, vlan->vid_begin, vlan->vid_end, vlan->flags);
 
 	if (vlan->vid_begin > 4095 || vlan->vid_end > 4095) {
@@ -1538,14 +1538,14 @@ static int rtl838x_vlan_del(struct dsa_switch *ds, int port,
 			/* Get untagged port memberships of this vlan */
 			priv->r->vlan_tables_read(v, &info);
 			portmask = info.untagged_ports & (~(1 << port));
-			pr_info("Untagged ports, VLAN %d: %llx\n", v, portmask);
+			pr_debug("Untagged ports, VLAN %d: %llx\n", v, portmask);
 			priv->r->vlan_set_untagged(v, portmask);
 		}
 
 		/* Get tagged port memberships of this vlan */
 		priv->r->vlan_tables_read(v, &info);
 		portmask = info.tagged_ports & (~(1 << port));
-		pr_info("Tagged ports, VLAN %d: %llx\n", v, portmask);
+		pr_debug("Tagged ports, VLAN %d: %llx\n", v, portmask);
 		priv->r->vlan_set_tagged(v, portmask, info.vlan_conf);
 	}
 	mutex_unlock(&priv->reg_mutex);
@@ -1560,7 +1560,7 @@ static void rtl838x_port_bridge_leave(struct dsa_switch *ds, int port,
 	u64 port_bitmap = 1 << priv->cpu_port;
 	int i;
 
-	pr_info("%s %x: %d", __func__, (u32)priv, port);
+	pr_debug("%s %x: %d", __func__, (u32)priv, port);
 	mutex_lock(&priv->reg_mutex);
 	for (i = 0; i < ds->num_ports; i++) {
 		/* Remove this port from the port matrix of the other ports
@@ -1596,7 +1596,7 @@ static int rtl838x_port_bridge_join(struct dsa_switch *ds, int port,
 	u64 port_bitmap = 1 << priv->cpu_port;
 	int i;
 
-	pr_info("%s %x: %d %llx", __func__, (u32)priv, port, port_bitmap);
+	pr_debug("%s %x: %d %llx", __func__, (u32)priv, port, port_bitmap);
 	mutex_lock(&priv->reg_mutex);
 	for (i = 0; i < ds->num_ports; i++) {
 		/* Add this port to the port matrix of the other ports in the
@@ -1630,7 +1630,7 @@ static int rtl838x_port_enable(struct dsa_switch *ds, int port,
 {
 	struct rtl838x_switch_priv *priv = ds->priv;
 
-	pr_info("%s: %x %d", __func__, (u32) priv, port);
+	pr_debug("%s: %x %d", __func__, (u32) priv, port);
 	priv->ports[port].enable = true;
 
 	if (dsa_is_cpu_port(ds, port))
@@ -1652,7 +1652,7 @@ static void rtl838x_port_disable(struct dsa_switch *ds, int port)
 {
 	struct rtl838x_switch_priv *priv = ds->priv;
 
-	pr_info("%s %x: %d", __func__, (u32)priv, port);
+	pr_debug("%s %x: %d", __func__, (u32)priv, port);
 
 	/* you can only disable user ports */
 	if (!dsa_is_user_port(ds, port))
@@ -1675,7 +1675,7 @@ static int rtl838x_get_mac_eee(struct dsa_switch *ds, int port,
 {
 	struct rtl838x_switch_priv *priv = ds->priv;
 
-	pr_info("%s: port %d", __func__, port);
+	pr_debug("%s: port %d", __func__, port);
 	e->supported = SUPPORTED_100baseT_Full | SUPPORTED_1000baseT_Full;
 	if (sw_r32(priv->r->mac_force_mode_ctrl(port)) & (1 << 9))
 		e->advertised |= ADVERTISED_100baseT_Full;
@@ -1684,7 +1684,7 @@ static int rtl838x_get_mac_eee(struct dsa_switch *ds, int port,
 		e->advertised |= ADVERTISED_1000baseT_Full;
 
 	e->eee_enabled = priv->ports[port].eee_enabled;
-	pr_info("enabled: %d, active %x\n", e->eee_enabled, e->advertised);
+	pr_debug("enabled: %d, active %x\n", e->eee_enabled, e->advertised);
 
 	if (sw_r32(RTL838X_MAC_EEE_ABLTY) & (1 << port)) {
 		e->lp_advertised = ADVERTISED_100baseT_Full;
@@ -1692,7 +1692,7 @@ static int rtl838x_get_mac_eee(struct dsa_switch *ds, int port,
 	}
 
 	e->eee_active = !!(e->advertised & e->lp_advertised);
-	pr_info("active: %d, lp %x\n", e->eee_active, e->lp_advertised);
+	pr_debug("active: %d, lp %x\n", e->eee_active, e->lp_advertised);
 
 	return 0;
 }
@@ -1702,20 +1702,20 @@ static int rtl838x_set_mac_eee(struct dsa_switch *ds, int port,
 {
 	struct rtl838x_switch_priv *priv = ds->priv;
 
-	pr_info("%s: port %d", __func__, port);
+	pr_debug("%s: port %d", __func__, port);
 	if (e->eee_enabled) {
-		pr_info("Globally enabling EEE\n");
+		pr_debug("Globally enabling EEE\n");
 		sw_w32_mask(0x4, 0, RTL838X_SMI_GLB_CTRL);
 	}
 	if (e->eee_enabled) {
-		pr_info("Enabling EEE for MAC %d\n", port);
+		pr_debug("Enabling EEE for MAC %d\n", port);
 		sw_w32_mask(0, 3 << 9, priv->r->mac_force_mode_ctrl(port));
 		sw_w32_mask(0, 1 << port, RTL838X_EEE_PORT_TX_EN);
 		sw_w32_mask(0, 1 << port, RTL838X_EEE_PORT_RX_EN);
 		priv->ports[port].eee_enabled = true;
 		e->eee_enabled = true;
 	} else {
-		pr_info("Disabling EEE for MAC %d\n", port);
+		pr_debug("Disabling EEE for MAC %d\n", port);
 		sw_w32_mask(3 << 9, 0, priv->r->mac_force_mode_ctrl(port));
 		sw_w32_mask(1 << port, 0, RTL838X_EEE_PORT_TX_EN);
 		sw_w32_mask(1 << port, 0, RTL838X_EEE_PORT_RX_EN);
@@ -1732,7 +1732,7 @@ static void rtl838x_phylink_mac_config(struct dsa_switch *ds, int port,
 	struct rtl838x_switch_priv *priv = ds->priv;
 	u32 reg;
 
-	pr_info("%s port %d, mode %x\n", __func__, port, mode);
+	pr_debug("%s port %d, mode %x\n", __func__, port, mode);
 
 	if (port == priv->cpu_port) {
 		/* Set Speed, duplex, flow control
@@ -1752,14 +1752,14 @@ static void rtl838x_phylink_mac_config(struct dsa_switch *ds, int port,
 
 	reg = sw_r32(priv->r->mac_force_mode_ctrl(port));
 	if (mode == MLO_AN_PHY) {
-		pr_info("PHY autonegotiates\n");
+		pr_debug("PHY autonegotiates\n");
 		reg |= 1 << 2;
 		sw_w32(reg, priv->r->mac_force_mode_ctrl(port));
 		return;
 	}
 
 	if (mode != MLO_AN_FIXED)
-		pr_info("Not fixed\n");
+		pr_debug("Not fixed\n");
 
 	/* Clear id_mode_dis bit, and the existing port mode, let
 	 * RGMII_MODE_EN bet set by mac_link_{up,down}
@@ -1816,7 +1816,7 @@ static void rtl838x_phylink_validate(struct dsa_switch *ds, int port,
 {
 	__ETHTOOL_DECLARE_LINK_MODE_MASK(mask) = { 0, };
 
-	pr_info("In %s port %d", __func__, port);
+	pr_debug("In %s port %d", __func__, port);
 
 	if (!phy_interface_mode_is_rgmii(state->interface) &&
 	    state->interface != PHY_INTERFACE_MODE_1000BASEX &&
@@ -1916,10 +1916,10 @@ static int rtl838x_mdio_probe(struct rtl838x_switch_priv *priv)
 	int ret;
 	u32 pn;
 
-	pr_info("In %s\n", __func__);
+	pr_debug("In %s\n", __func__);
 	mii_np = of_find_compatible_node(NULL, NULL, "realtek,rtl838x-mdio");
 	if (mii_np) {
-		pr_info("Found compatible MDIO node!\n");
+		pr_debug("Found compatible MDIO node!\n");
 	} else {
 		dev_err(priv->dev, "no %s child node found", "mdio-bus");
 		return -ENODEV;
@@ -1927,7 +1927,7 @@ static int rtl838x_mdio_probe(struct rtl838x_switch_priv *priv)
 
 	priv->mii_bus = of_mdio_find_bus(mii_np);
 	if (!priv->mii_bus) {
-		pr_info("Deferring probe of mdio bus\n");
+		pr_debug("Deferring probe of mdio bus\n");
 		return -EPROBE_DEFER;
 	}
 	if (!of_device_is_available(mii_np))
@@ -1959,7 +1959,7 @@ static int rtl838x_mdio_probe(struct rtl838x_switch_priv *priv)
 		// Check for the integrated SerDes of the RTL8380M first
 		if (of_property_read_bool(dn, "phy-is-integrated")
 			&& priv->id == 0x8380 && pn >= 24) {
-			pr_info("----> FÓUND A SERDES\n");
+			pr_debug("----> FÓUND A SERDES\n");
 			priv->ports[pn].phy = PHY_RTL838X_SDS;
 			continue;
 		}
@@ -1990,27 +1990,27 @@ static int rtl838x_mdio_probe(struct rtl838x_switch_priv *priv)
 	sw_w32_mask(0, 1 << 15, RTL838X_SMI_GLB_CTRL);
 	/* Power on fibre ports and reset them if necessary */
 	if (priv->ports[24].phy == PHY_RTL838X_SDS) {
-		pr_info("Powering on fibre ports & reset\n");
+		pr_debug("Powering on fibre ports & reset\n");
 		rtl8380_sds_power(24, 1);
 		rtl8380_sds_power(26, 1);
 	}
 
-	pr_info("%s done\n", __func__);
+	pr_debug("%s done\n", __func__);
 	return 0;
 }
 
 static const struct dsa_switch_ops rtl838x_switch_ops = {
 	.get_tag_protocol	= rtl838x_get_tag_protocol,
 	.setup			= rtl838x_setup,
-	.port_vlan_filtering	= rtl838x_vlan_filtering,
-	.port_vlan_prepare	= rtl838x_vlan_prepare,
-	.port_vlan_add		= rtl838x_vlan_add,
-	.port_vlan_del		= rtl838x_vlan_del,
+	//.port_vlan_filtering	= rtl838x_vlan_filtering,
+	//.port_vlan_prepare	= rtl838x_vlan_prepare,
+	//.port_vlan_add		= rtl838x_vlan_add,
+	//.port_vlan_del		= rtl838x_vlan_del,
 	.port_bridge_join	= rtl838x_port_bridge_join,
 	.port_bridge_leave	= rtl838x_port_bridge_leave,
 	.port_stp_state_set	= rtl838x_port_stp_state_set,
 	.set_ageing_time	= rtl838x_set_l2aging,
-	.port_fast_age		= rtl838x_fast_age,
+	//.port_fast_age		= rtl838x_fast_age,
 	.port_fdb_add		= rtl838x_port_fdb_add,
 	.port_fdb_del		= rtl838x_port_fdb_del,
 	.port_fdb_dump		= rtl838x_port_fdb_dump,
@@ -2039,7 +2039,7 @@ static int __init rtl838x_sw_probe(struct platform_device *pdev)
 	struct rtl838x_switch_priv *priv;
 	struct device *dev = &pdev->dev;
 
-	pr_info("Probing RTL838X switch device\n");
+	pr_debug("Probing RTL838X switch device\n");
 	if (!pdev->dev.of_node) {
 		dev_err(dev, "No DT found\n");
 		return -EINVAL;
@@ -2073,7 +2073,7 @@ static int __init rtl838x_sw_probe(struct platform_device *pdev)
 		priv->ds->num_ports = 53;
 		rtl8390_get_version(priv);
 	}
-	pr_info("Chip version %c\n", priv->version);
+	pr_debug("Chip version %c\n", priv->version);
 
 	err = rtl838x_mdio_probe(priv);
 	if (err) {
@@ -2121,7 +2121,7 @@ static int __init rtl838x_sw_probe(struct platform_device *pdev)
 
 static int rtl838x_sw_remove(struct platform_device *pdev)
 {
-	pr_info("Removing platform driver for rtl838x-sw\n");
+	pr_debug("Removing platform driver for rtl838x-sw\n");
 	return 0;
 }
 
-- 
2.25.1

