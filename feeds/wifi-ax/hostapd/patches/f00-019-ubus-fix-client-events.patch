--- a/src/ap/ubus.c
+++ b/src/ap/ubus.c
@@ -580,6 +580,7 @@ static int hostapd_clear_session(struct
 	{
 		if (session_id == rec->session_id) {
 			/* dec counter and delete */
+			wpa_printf(MSG_INFO, "%s Deleting client session with session id %llu", __func__, session_id);
 			cached_events_nr -= rec->rec_nr;
 			avl_delete(&hapd->ubus.rt_events, &rec->avl);
 			os_free(rec->records);
@@ -633,6 +634,11 @@ static int hostapd_sessions(struct ubus_
 		/* messages for current session */
 		for (size_t i = 0; i < rec->rec_nr; i++) {
 			c_rec = &rec->records[i];
+			if (c_rec->processed) {
+				/* Record is already reported, continue */
+				continue;
+			}
+
 			/* check message type */
 			switch (c_rec->type) {
 			/* ClientAuthEvent */
@@ -646,6 +652,7 @@ static int hostapd_sessions(struct ubus_
 				blobmsg_add_u32(&b_ev, "auth_status", p->auth_status);
 				blobmsg_add_string(&b_ev, "ssid", p->ssid);
 				blobmsg_close_table(&b_ev, t_msg);
+				c_rec->processed = true;
 				break;
 			}
 
@@ -665,6 +672,7 @@ static int hostapd_sessions(struct ubus_
 				blobmsg_add_u8(&b_ev, "using11v", p->using11v);
 				blobmsg_add_string(&b_ev, "ssid", p->ssid);
 				blobmsg_close_table(&b_ev, t_msg);
+				c_rec->processed = true;
 				break;
 			}
 
@@ -680,6 +688,7 @@ static int hostapd_sessions(struct ubus_
 				blobmsg_add_u32(&b_ev, "internal_rc", p->internal_rc);
 				blobmsg_add_string(&b_ev, "ssid", p->ssid);
 				blobmsg_close_table(&b_ev, t_msg);
+				c_rec->processed = true;
 				break;
 			}
 
@@ -693,6 +702,7 @@ static int hostapd_sessions(struct ubus_
 				blobmsg_add_u64(&b_ev, "fdata_tx_up_ts_in_us", p->tx_ts.tv_sec * (uint64_t)1000000);
 				blobmsg_add_u64(&b_ev, "fdata_rx_up_ts_in_us", p->rx_ts.tv_sec * (uint64_t)1000000);
 				blobmsg_close_table(&b_ev, t_msg);
+				c_rec->processed = true;
 				break;
 			}
 
@@ -705,6 +715,7 @@ static int hostapd_sessions(struct ubus_
 				blobmsg_add_string(&b_ev, "sta_mac", p->sta_mac);
 				blobmsg_add_string(&b_ev, "ip_address", p->ip_addr);
 				blobmsg_close_table(&b_ev, t_msg);
+				c_rec->processed = true;
 				break;
 			}
 
@@ -1912,6 +1923,7 @@ int hostapd_ubus_handle_rt_event(struct
 		struct client_session_record *rp = &rec->records[rec->rec_nr - 1];
 		rp->type = CST_AUTH;
 		rp->u.auth.session_id = rec->session_id;
+		rp->processed = false;
 
 		/* timestamp */
 		rp->timestamp = timestamp;
@@ -1942,6 +1954,7 @@ int hostapd_ubus_handle_rt_event(struct
 		struct client_session_record *rp = &rec->records[rec->rec_nr - 1];
 		rp->type = CST_ASSOC;
 		rp->u.assoc.session_id = rec->session_id;
+		rp->processed = false;
 		/* timestamp */
 		rp->timestamp = timestamp;
 		/* frequency */
@@ -1986,6 +1999,7 @@ int hostapd_ubus_handle_rt_event(struct
 		struct client_session_record *rp = &rec->records[rec->rec_nr - 1];
 		rp->type = CST_DISASSOC;
 		rp->u.disassoc.session_id = rec->session_id;
+		rp->processed = false;
 		/* timestamp */
 		rp->timestamp = timestamp;
 		/* frequency */
@@ -2017,6 +2031,7 @@ int hostapd_ubus_handle_rt_event(struct
 		struct client_session_record *rp = &rec->records[rec->rec_nr - 1];
 		rp->type = CST_FDATA;
 		rp->u.fdata.session_id = rec->session_id;
+		rp->processed = false;
 		/* timestamp */
 		rp->timestamp = timestamp;
 		/* STA MAC */
@@ -2045,6 +2060,7 @@ int hostapd_ubus_handle_rt_event(struct
 		struct client_session_record *rp = &rec->records[rec->rec_nr - 1];
 		rp->type = CST_IP;
 		rp->u.ip.session_id = rec->session_id;
+		rp->processed = false;
 		/* timestamp */
 		rp->timestamp = timestamp;
 		/* STA MAC */
--- a/src/ap/ubus.h
+++ b/src/ap/ubus.h
@@ -110,6 +110,7 @@ struct client_ip_event {
 };
 
 struct client_session_record {
+	bool processed;
 	int type;
 	uint64_t timestamp;
 	union {
